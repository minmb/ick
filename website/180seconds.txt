h1. Ick in 180 seconds or less

h2. Transforming your code

Object#let turns:

<pre syntax="ruby">
</pre>

Into:

<pre syntax="ruby">
</pre>

Object#returning turns:

<pre syntax="ruby">
</pre>

Into:

<pre syntax="ruby">
</pre>

Object#my turns:

<pre syntax="ruby">
</pre>

Into:

<pre syntax="ruby">
</pre>

Object#inside turns:

<pre syntax="ruby">
</pre>

Into:

<pre syntax="ruby">
</pre>

h2. Test Cases

The four canonical block structuring methods (#let, #returning, #my, and #inside):

<pre syntax="ruby">
Ick.sugarize
arr = []

# let returns the value of the block and executes in the current environment
assert_equal(
  "3628800 ends with zero",
  let((1..10).inject(&:*)) { |num|
    arr << self.class
    num % 10 == 0 ? "#{num} ends with zero" : "#{num} does not end with zero"
  })
assert_equal([ self.class ], arr)

# returning returns the value of the expression and executes in the current environment
assert_equal(
  3628800,
  returning((1..10).inject(&:*)) { |num|
    arr << self.class
    num % 10 == 0 ? "#{num} ends with zero" : "#{num} does not end with zero"
  })
assert_equal([ self.class, self.class ], arr)

# my returns the value of the block and executes in the expression's environment
assert_equal(
  "3628800 ends with zero",
  my((1..10).inject(&:*)) { |num|
    arr << self.class
    num % 10 == 0 ? "#{num} ends with zero" : "#{num} does not end with zero"
  })
assert_equal([ self.class, self.class, Fixnum ], arr)

# inside returns the value of the expression and executes in the expression's environment
assert_equal(
  3628800,
  inside((1..10).inject(&:*)) { |num|
    arr << self.class
    num % 10 == 0 ? "#{num} ends with zero" : "#{num} does not end with zero"
  })
assert_equal([ self.class, self.class, Fixnum, Fixnum ], arr)
</pre>

The two most common guarded evauators (#maybe and #try):

<pre syntax="ruby">
# an object with two methods. #do returns itself, #do_not returns nil
yoda = returning(Object.new) do |obj|
  def obj.do
    self
  end
  def obj.do_not
    nil
  end
end

# maybe handles nils, even for methods nil has, but not missing methods
assert_equal(
  yoda, 
  maybe(yoda) { |obj| obj.do }
)
assert_nil(
  maybe(nil) { |obj| obj.do }
)
assert_nil(
  maybe(yoda) { |obj| obj.do_not.do }
)
assert_nil(
  maybe(nil) { |obj| obj.nil? }
)
assert_raise(NoMethodError) do
  maybe(yoda) { |obj| obj.fubar }
end

#try handles NoMethodErrors, without caring whether nil is involved
assert_equal(
  yoda, 
  try(yoda) { |obj| obj.do }
)
assert_nil(
  try(nil) { |obj| obj.do_not }
)
assert_not_nil(
  try(nil) { |obj| obj.nil? }
)
assert_nil(
  try(yoda) { |obj| obj.fubar }
)
</pre>

h2. Administrivia

h3. Home Sweet Home

"ick.rubyforge.org":http://ick.rubyforge.org

h3. How to submit patches

Read the "8 steps for fixing other people's code":http://drnicwilliams.com/2007/06/01/8-steps-for-fixing-other-peoples-code/.

The trunk repository is @svn://rubyforge.org/var/svn/ick/trunk@ for anonymous access.

h3. License

This code is free to use under the terms of the "MIT license":http://en.wikipedia.org/wiki/MIT_License. 

h3. Shout Out

"Mobile Commons":http://mcommons.com/. Still Huge After All These Years.

h3. Contact

Comments are welcome. Send an email to "Reginald Braithwaite":mailto:raganwald+rubyforge@gmail.com. And you can always visit "weblog.raganwald.com":http://weblog.raganwald.com/ to see what's cooking.